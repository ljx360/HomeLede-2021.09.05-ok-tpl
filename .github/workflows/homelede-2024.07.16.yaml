



#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build HomeLede,2024.07.16

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/xiaoqingfengATGH/HomeLede
  #REPO_URL: https://github.com/ljx360/HomeLede_offical_2023.03.11.git
  REPO_BRANCH: k5
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  #DIY_P1_SH: diy-part1.sh
  #DIY_P2_SH: diy-part2.sh
  DIY_SH: prepareCompile.sh
  GIT_DST_PATH: /workdir/openwrt
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DEVICE_NAME: openwrt_HomeLede_2024.07.16
  
  
  #ljx
  LJX_SH: ljx.sh
  

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        
        #sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        
        #sudo -E apt-get -qq update
        #sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        #sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsyncsudo -E apt-get -qq autoremove --purge
        #sudo -E apt-get -qq clean
        
        #2021.09.04
        sudo apt-get update -y
        #sudo apt-get -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
		
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir/openwrt
        sudo chown -R $USER:$GROUPS /workdir
        sudo chmod -R 777 /workdir






    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        
        #git ok
        git clone $REPO_URL -b $REPO_BRANCH /workdir/openwrt
        
        #2022
        #git clone https://github.com/xiaoqingfengATGH/HomeLede.git /workdir/openwrt
        
        #2023.02.12
        #git clone https://github.com/xiaoqingfengATGH/HomeLede.git /workdir/openwrt
        #git checkout -b k5 origin/k5
        
        
        #2023.02.12-v2
        #git clone https://github.com/xiaoqingfengATGH/HomeLede.git $GIT_DST_PATH
        
        #other
        ln -sf $GIT_DST_PATH $GITHUB_WORKSPACE/openwrt
        ln -sf $GIT_DST_PATH $GITHUB_WORKSPACE/HomeLede


        

    - name: HomeLede,pre
      working-directory: /workdir
      run: |
        echo ""
        echo "github homelede prepare"
        cd $GITHUB_WORKSPACE/HomeLede
        
        #update git
        #echo ""
        #echo "update k5"
        #git checkout -b k5 origin/k5
        
        echo ""
        echo "chmod 777 $DIY_SH"
        sudo chmod 777 ./$DIY_SH
        echo run diy sh:$DIY_SH
        ./$DIY_SH
        echo "github_workspace:$GITHUB_WORKSPACE"



    - name: run ljx.sh
      working-directory: /workdir
      run: |
        echo ""
        echo "try run ljx.sh"

        echo "cd $GITHUB_WORKSPACE"
        cd $GITHUB_WORKSPACE
        
        echo ""
        echo "list file"
        ls -al $GITHUB_WORKSPACE

        echo ""
        echo "du -ah"
        du -ah
        
        echo ""
        echo "chmod +x $GITHUB_WORKSPACE/$LJX_SH"
        chmod 777 $GITHUB_WORKSPACE/$LJX_SH
        
        echo ""
        echo "cd $GITHUB_WORKSPACE/openwrt"
        cd $GITHUB_WORKSPACE/openwrt
        

        echo ""
        echo "try run $GITHUB_WORKSPACE/$LJX_SH"
        #$GITHUB_WORKSPACE/$LJX_SH



    - name: Download package
      id: package
      #working-directory: /workdir
      run: |
        echo ""
        echo "down package"
        cd $GITHUB_WORKSPACE/openwrt
        make defconfig
        make download -j8 V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;



    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}


    - name: Compile the firmware
      id: compile
      #working-directory: /workdir
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s || make -j1 || make -j1 V=s
        #make -j1 V=s or V=sc
        #make -j1 || make -j1 V=s
        #make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "?? [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "?? [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 30
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
